{"name":"Building","tagline":"Some code for using the builder pattern","body":"# Building\r\n\r\n[Builder.cs](https://raw.github.com/MrAntix/Building/master/antix-building/Antix.Building/Builder.cs)\r\n\r\nThis is a generic builder class which separates off the business of creation into a reusable component\r\n\r\nIts a quick step to get into the builder pattern which is useful for building loads of things, \r\nhierarchical things, fluent interfaces for configuring things and all that\r\n\r\nIt was part of [Testing](http://mrantix.github.io/Testing/), but its so \"awesome\" for so many things, \r\nnot just testing, its got its own project now\r\n\r\n[On NuGet](https://nuget.org/packages/antix-building)\r\n\r\n### Examples\r\n\r\n    // create a builder for a mocked interface (using Moq)\r\n    var builder = new Builder<IThingy>(Mock.Of<IThingy>)\r\n                    .With(x => \r\n                                {\r\n                                    x.Name = \"Some Name\";\r\n                                    x.SetValue(\"Some Value\");\r\n                                });\r\n \r\n    // create an instance\r\n    var instance = builder.Build();\r\n\r\n    // create an other instance, override the name\r\n    var otherInstance = builder\r\n\t                    .Build(x => x.Name = \"Other Name\");\r\n\r\n    // create 100 instances, then 10 overriding the name, the index is supplied too\r\n    var instances = builder\r\n                        .Build(100)\r\n                        .Build(10, (x, i) => x.Name = \"Other Name\")\r\n\t\t\t\t\t\t.ToList();\r\n\r\n### Notes on Usage\r\n\r\nThe builder implements IEnumerable<T> and is has a lazy iterator, which means everytime \r\nyou enumerate it you will get a new set of objects\r\n\r\nCall .ToArray() or .ToList() to fix a set to a variable (see above)\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}